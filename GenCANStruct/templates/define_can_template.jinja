/* Auto-generated file - DO NOT EDIT */
#ifndef CNF_CLASS_CAN_H
#define CNF_CLASS_CAN_H

#include <stdint.h>
#include <memory>
#include <iostream>
#include <chrono>
#include <limits> 

#include "../CanDB.h"
#include "Common.h"

{% for message in messages %}
#define {{ message.name }}_ID 0x{{ message.frame_id }}
{% endfor %}

#define ARR_MSG_FILTER { {% for message in messages %} {{ message.name }}_ID {% if not loop.last %},{% endif %} {% endfor %} }

{% for message in messages %}
struct {{ message.name }}_SIGNALS
{
{% for signal in message.signals %}
{% if signal.length <= 8 %}
    {% if signal.is_signed %}
    CAN_DATA<int8_t> {{ signal.name }};
    {% else %}
    CAN_DATA<uint8_t> {{ signal.name }};
    {% endif %}
{% elif signal.length <= 16 %}
    {% if signal.is_signed %}
    CAN_DATA<int16_t> {{ signal.name }};uint8_t
    {% else %}
    CAN_DATA<uint16_t> {{ signal.name }};
    {% endif %}
{% elif signal.length <= 32 %}
    {% if signal.is_signed %}
    CAN_DATA<int32_t> {{ signal.name }};
    {% else %}
    CAN_DATA<uint32_t> {{ signal.name }};
    {% endif %}
{% else %}
    {% if signal.is_signed %}
    CAN_DATA<int64_t> {{ signal.name }};
    {% else %}
    CAN_DATA<uint64_t> {{ signal.name }};
    {% endif %}
{% endif %}
{% endfor %}
};

class {{ message.name }}_MSG : public ICAN_MSG
{
    {{ message.name }}_SIGNALS  signals; 
public:
    {{ message.name }}_MSG()
    {
        this->id            = {{ message.frame_id }};
        this->dlc           = {{ message.length }};
        this->periodTimeMs  = 100;  
        this->status        = CAN_STATUS::eCS_Unknown;
        this->timeoutMs     = this->periodTimeMs * 5;      
        this->lastActivated = std::chrono::steady_clock::now();
    }

    ~{{ message.name }}_MSG(){

    }


    void unpack(const uint8_t* frame) override {
        {% for signal in message.signals %}
            signals.{{ signal.name }}.value = extractSignalValue<decltype(signals.{{ signal.name }}.value)>(frame, (uint8_t){{ signal.start }}, (uint8_t){{ signal.start + signal.length - 1 }});
        {% endfor %}
    }

    CanFrame pack() override
    {
        uint8_t combinedData[CANFD_MAX_DLEN] = {0};  // Assuming MAX_DATA_SIZE is a static constant in CanFrame

        uint8_t* buffer = combinedData;
        copyPropertiesToBuffer(buffer, {% for signal in message.signals %} signals.{{ signal.name }} {% if not loop.last  %}, {% endif %} {% endfor %} );
        CanFrame combinedFrame(this->id, combinedData, CANFD_MAX_DLEN);

        return combinedFrame;
    }

    canid_t getCanId()
    {
        return this->id;
    }
};

{% endfor %}

class CFGCAN
{
private:
    CFGCAN() {}  

public:
    static CFGCAN& getInstance()
    {
        static CFGCAN instance;  
        return instance;
    }

    void initRx()
    {
        {% for message in messages %}
            std::shared_ptr<{{ message.name }}_MSG> {{ message.name }}_OBJ = std::make_shared<{{ message.name }}_MSG>();
            CanDB::getInstance().setRxCanMessage({{ message.name }}_OBJ->getCanId(), {{ message.name }}_OBJ);
        {% endfor %}
    }

    void initTx()
    {
        // Your existing code for initTx
    }

    CFGCAN(const CFGCAN&) = delete;  // Delete copy constructor
    void operator=(const CFGCAN&) = delete;  // Delete assignment operator
    ~CFGCAN() {}
};

#endif